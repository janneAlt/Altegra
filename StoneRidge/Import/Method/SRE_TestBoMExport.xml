<AML>
 <Item type="Method" id="C11ED9B3E7F34E3CA2FBDCE5463FD7F8" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[Innovator inn = this.getInnovator();
string partId = this.getProperty("partId");
// string partId = "46B34C5FD37248759324A3CB0A9821CF";
Item partName = newItem("Part","get");
partName.setID(partId);
partName = partName.apply();
string nm = partName.getProperty("item_number");
string nmRev = partName.getProperty("major_rev");
string filename = nm+nmRev;

                    Item varBomPath = newItem("Variable", "get");
                    varBomPath.setProperty("name", "SRE_BOMPATH");
                    varBomPath = varBomPath.apply();
                    string bomPath = varBomPath.getProperty("value");
System.IO.DirectoryInfo di = new DirectoryInfo(bomPath+"\\");

foreach (FileInfo file in di.GetFiles())
{
    file.Delete(); 
}
foreach (DirectoryInfo dir in di.GetDirectories())
{
    dir.Delete(true); 
}
 


Item callProc = newItem("SQL","SQL PROCESS");
callProc.setProperty("name","MultiBom_GetCompleteBom1");
callProc.setProperty("PROCESS","CALL");
callProc.setProperty("ARG1",partId);
callProc = callProc.apply();


int countBOM = callProc.getItemCount();

var srcid = new List<string>();

for (int i =0; i<countBOM;i++)
{
  string level = callProc.getItemByIndex(i).getProperty("level");

  string sourceID=callProc.getItemByIndex(i).getProperty("source_id");
  srcid.Add(sourceID);

   }
   
 var noDupes = srcid.Distinct().ToList();
 foreach(string src in noDupes)
 {
     var BOM = new List<string>();
Item callProc1 = newItem("SQL","SQL PROCESS");
callProc1.setProperty("name","MultiBom_GetCompleteBom1");
callProc1.setProperty("PROCESS","CALL");
callProc1.setProperty("ARG1",src);
callProc1 = callProc1.apply();
if(callProc1.getItemCount()==0)
{
    
}
else{
for(int j =0; j<callProc1.getItemCount();j++)
{
    if(callProc1.getItemByIndex(j).getProperty("level") =="0")
    {
       
        string identity =callProc1.getItemByIndex(j).getProperty("related_item_number");
        string qty =callProc1.getItemByIndex(j).getProperty("quantity");
        string uom = callProc1.getItemByIndex(j).getProperty("uom");
        string rev=callProc1.getItemByIndex(j).getProperty("related_revision");
        BOM.Add(identity+rev+","+" "+","+qty+","+uom+","+"100.0"+","+"100.0");
        
    }
    
}
}
Item partNames = newItem("Part","get");
partNames.setID(src);
partNames = partNames.apply();

string nms = partNames.getProperty("item_number");
string nmsRev= partNames.getProperty("major_rev");
string filenames = nms.Replace('/', '_').Replace('.', '_');
// return inn.newError("here");
System.IO.File.WriteAllLines(bomPath+"\\"+filenames+nmsRev+".csv", BOM);
 }
   

string sourcePath = bomPath;
string targetPath = bomPath+ "\\"+filename;
if (!Directory.Exists(targetPath))

{
Directory.CreateDirectory(targetPath);
}

foreach (var srcPath in Directory.GetFiles(sourcePath))
{
//Copy the file from sourcepath and place into mentioned target path, 
//Overwrite the file if same file is exist in target path

 File.Copy(srcPath, srcPath.Replace(sourcePath, targetPath), true);
 
}

using (var zip = new Ionic.Zip.ZipFile())
{
    zip.TempFileFolder = bomPath;
    zip.AddDirectory(targetPath);
    zip.Save(bomPath+"\\"+filename+".zip");
}
        
    


return partName;]]></method_code>
  <method_type>C#</method_type>
  <name>SRE_TestBoMExport</name>
 </Item>
</AML>